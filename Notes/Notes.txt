Bootloader using C#:
https://github.com/MichalStrehovsky/zerosharp/blob/master/efi-no-runtime/zerosharp.cs

Alternate Headers:
https://github.com/c-util/c-efi/tree/master/src

https://github.com/boazsegev/BoOS/tree/v.0.0.0

UEFI:
https://kazlauskas.me/entries/x64-uefi-os-1.html


CPUID:
https://docs.microsoft.com/en-us/cpp/intrinsics/cpuid-cpuidex?view=vs-2019
https://gist.github.com/CoolerVoid/0e2b5791963dd6aa714e

https://www.pagetable.com/?p=298

SetVirtualAddressMap
https://mjg59.dreamwidth.org/3244.html

Exit Boot Services and memory:
http://hypervsir.blogspot.com/2014/09/approach-to-retrieving-bios-memory-map.html

SMBios lookups:
https://github.com/biosbits/bits/blob/master/python/efi.py

simple firmware interface

Paging:
https://wiki.osdev.org/Paging
https://wiki.osdev.org/CPU_Registers_x86-64#CR0
https://wiki.osdev.org/Page_Tables
https://os.phil-opp.com/paging-implementation/#accessing-page-tables

Address space:
https://en.wikipedia.org/wiki/X86-64#Virtual_address_space_details

Loader:
https://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/
https://github.com/fancycode/MemoryModule/blob/master/MemoryModule.c#L419

GDT:
http://www.jamesmolloy.co.uk/tutorial_html/4.-The%20GDT%20and%20IDT.html
https://wiki.osdev.org/GDT_Tutorial
https://wiki.osdev.org/Global_Descriptor_Table

TSS:


IST stacks:
https://www.kernel.org/doc/Documentation/x86/kernel-stacks

x64 functions that should be intrinsics:
https://github.com/tandasat/HyperPlatform/blob/master/HyperPlatform/Arch/x64/x64.asm

http://os-adventure.blogspot.com/?view=classic

x64 Stacks:
https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64
https://docs.microsoft.com/en-us/cpp/build/stack-usage?view=vs-2019

Calling conventions:
https://www.exploit-db.com/papers/13177
   +-------------------------+
   | Parameter 6             |
   +-------------------------+
   | Parameter 5             |
   +-------------------------+
   | Parameter 4 (R9 Home)   |
   +-------------------------+
   | Parameter 3 (R8 Home)   |
   +-------------------------+
   | Parameter 2 (RDX Home)  |
   +-------------------------+
   | Parameter 1 (RCX Home)  |
   +-------------------------+
   | Return address          | <- RSP
   +-------------------------+

Push: dec, then write
Pop: read, then inc

MASM:
http://www.phatcode.net/res/223/files/html/Chapter_8/CH08-7.html
https://www.csie.ntu.edu.tw/~acpang/course/asm_2004/slides/chapt_10_PartIIbw.pdf

OS:
https://github.com/redox-os/redox

Loading Segment Register:
https://stackoverflow.com/questions/34264752/change-gdt-and-update-cs-while-in-long-mode
http://os-adventure.blogspot.com/2014/12/local-gdt-and-idt.html?view=classic
https://forum.osdev.org/viewtopic.php?f=1&t=29883&sid=b954100cc5c685faa4a7f958bad5291a&start=15

x64 Calling Convention:
https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019
https://stackoverflow.com/questions/20637569/assembly-registers-in-64-bit-architecture
https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6

Ntdll showing off systemcall:
.text:000000018009C578 algn_18009C578:                         ; DATA XREF: .pdata:00000001801712B8↓o
.text:000000018009C578                 align 20h
.text:000000018009C580 ; Exported entry 431. NtOpenProcess
.text:000000018009C580 ; Exported entry 1969. ZwOpenProcess
.text:000000018009C580
.text:000000018009C580 ; =============== S U B R O U T I N E =======================================
.text:000000018009C580
.text:000000018009C580
.text:000000018009C580                 public ZwOpenProcess
.text:000000018009C580 ZwOpenProcess   proc near               ; CODE XREF: RtlQueryProcessDebugInformation+122↑p
.text:000000018009C580                                         ; sub_1800751E8+17C↑p ...
.text:000000018009C580                 mov     r10, rcx        ; NtOpenProcess
.text:000000018009C583                 mov     eax, 26h
.text:000000018009C588                 test    byte ptr ds:7FFE0308h, 1
.text:000000018009C590                 jnz     short loc_18009C595
.text:000000018009C592                 syscall                 ; Low latency system call
.text:000000018009C594                 retn
.text:000000018009C595 ; ---------------------------------------------------------------------------
.text:000000018009C595
.text:000000018009C595 loc_18009C595:                          ; CODE XREF: ZwOpenProcess+10↑j
.text:000000018009C595                 int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND
.text:000000018009C595                                         ; DS:SI -> counted CR-terminated command string
.text:000000018009C597                 retn
.text:000000018009C597 ZwOpenProcess   endp
.text:000000018009C597


Font Parsing:
http://stevehanov.ca/blog/?id=143
https://github.com/kv01/ttf-parser
https://github.com/microsoft/cascadia-code
https://www.freetype.org/freetype2/docs/ft2faq.html


UEFI GDT
address: 3FFEEF18
limit: 3f


0
00 CF 93 00 0000 FFFF - 
00 CF 9A 00 0000 FFFF
00 CF 92 00 0000 FFFF
00 CF 9A 00 0000 FFFF
00 AF 9B 00 0000 FFFF - code
0
0

      9 - present, S = 1 - user
	  F - P, DBL=3, S=1 - kernel
	   3 - RW, accessed
	   2 - RW (data)
	   A - execute/read (code)
	   9 - TSS type
	  8 - Present only


    F - seglimit 2
   C - G (4gb), DB (data)

All 20 bits of segment descriptors are on - ignored in 64 bit anyways



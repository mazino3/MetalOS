#include "LoadingScreen.h"
#include "Colors.h"
#include "Main.h"
//#include <crt_stdlib.h>

//BGR pixels
const Color LoadingScreen::FireColors[] =
{
	{ 0x07, 0x07, 0x07, 0x00},
	{ 0x07, 0x07, 0x1F, 0x00},
	{ 0x0F, 0x07, 0x2F, 0x00},
	{ 0x0F, 0x07, 0x47, 0x00},
	{ 0x17, 0x07, 0x57, 0x00},
	{ 0x1F, 0x07, 0x67, 0x00},
	{ 0x1F, 0x07, 0x77, 0x00},
	{ 0x27, 0x07, 0x8F, 0x00},
	{ 0x2F, 0x07, 0x9F, 0x00},
	{ 0x3F, 0x07, 0xAF, 0x00},
	{ 0x47, 0x07, 0xBF, 0x00},
	{ 0x47, 0x07, 0xC7, 0x00},
	{ 0x4F, 0x07, 0xDF, 0x00},
	{ 0x57, 0x07, 0xDF, 0x00},
	{ 0x57, 0x07, 0xDF, 0x00},
	{ 0x5F, 0x07, 0xD7, 0x00},
	{ 0x5F, 0x07, 0xD7, 0x00},
	{ 0x67, 0x0F, 0xD7, 0x00},
	{ 0x6F, 0x0F, 0xCF, 0x00},
	{ 0x77, 0x0F, 0xCF, 0x00},
	{ 0x7F, 0x0F, 0xCF, 0x00},
	{ 0x87, 0x17, 0xCF, 0x00},
	{ 0x87, 0x17, 0xC7, 0x00},
	{ 0x8F, 0x17, 0xC7, 0x00},
	{ 0x97, 0x1F, 0xC7, 0x00},
	{ 0x9F, 0x1F, 0xBF, 0x00},
	{ 0x9F, 0x1F, 0xBF, 0x00},
	{ 0xA7, 0x27, 0xBF, 0x00},
	{ 0xA7, 0x27, 0xBF, 0x00},
	{ 0xAF, 0x2F, 0xBF, 0x00},
	{ 0xAF, 0x2F, 0xB7, 0x00},
	{ 0xB7, 0x2F, 0xB7, 0x00},
	{ 0xB7, 0x37, 0xB7, 0x00},
	{ 0xCF, 0x6F, 0xCF, 0x00},
	{ 0xDF, 0x9F, 0xDF, 0x00},
	{ 0xEF, 0xC7, 0xEF, 0x00},
	{ 0xFF, 0xFF, 0xFF, 0x00},
};

LoadingScreen::LoadingScreen(Display& display) :
	m_display(display)
{
	static_assert(sizeof(LoadingScreen::FireColors) == 37 * sizeof(Color));
}

void LoadingScreen::Draw()
{
	this->Initialize();

	//Run it a bunch of times
	for (size_t i = 0; i < 32; i++)
		DoFire();
}

void LoadingScreen::Initialize()
{
	//Set screen to black
	m_display.ColorScreen(FireColors[36]);

	//Set bottom line to last color
	for (uint32_t x = 0; x < m_display.GetWidth(); x++)
		m_display.SetPixel(FireColors[36], { x, m_display.GetHeight() - 1 });
}

void LoadingScreen::DoFire()
{
	for (uint32_t x = 0; x < m_display.GetWidth(); x++)
		for (uint32_t y = 1; y < m_display.GetHeight(); y++)
			SpreadFire({ x, y });
}

void LoadingScreen::SpreadFire(Point2D point)
{
	Color current = m_display.GetPixel(point);
	size_t index = current.Reserved;
	if (index == 0)
		m_display.SetPixel(FireColors[0], { point.X, point.Y-- });
	else
	{
		//double roundScaled = (double)rand() / RAND_MAX;
		//size_t randIndex = ((int)(roundScaled * 3.0) & 3);

		//m_display.SetPixel(FireColors[0], { point.X, point.Y-- });
		m_display.SetPixel(FireColors[index - 1], { point.X, point.Y-- });
		//Print("SpreadFire 0x%x, 0x%x. Index: 0x%d NewIndex: 0x%d\n", point.X, point.Y, index, index-1);

	}
}
